Apply Permutation

A permutation can be specified by an array P where P[i] represents the location of the element at i in the permutation.
For example the array <2,0,1,3> represents the permutation that maps the element at location 0 to location 2, the element at location 1 to location 0,
the element at location 2 to location 1, and keep the elment at location 3 unchanged. A permutation can be applied to an array to reorder the array.
For example the permutation <2,0,1,3> applied to A = <a,b,c,d> yiled the array <b,c,a,d>.

Given an Array A of n elements and a permutation P, apply P to A.

Solution

Brute Force Solution using O(n) space and O(n) time.
- Create a copy of the array and use it for our reference as keys.
    ApplyPermutation(P, A)
        let B[1..A.length] be new arrays
        aIndex <-- 1
        for i <-- 1 to P.length do
            B[P[i]] <-- A[aIndex]
            aIndex += 1
        return B

Optimized Solution
- Taking note of the permutation to be applied and the final result, I realized that the "sorted" positions for the permutation mean that there is no
  change needed. Taking advantage of this property we can swap elements at i and P[i] iff i does not equal p[i]. We perform the swaps on both P and A,
  and know that the permutation has been applied when the contents of P are sorted.
  ApplyPermutation(P, A)
      for i <-- 1 to P.length
          if i != P[i]
              swap(A, i, P[i])
              swap(P, i, P[i])
