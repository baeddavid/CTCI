Rotate Array
Given an unsorted array A of size N, rotate it by D elements (clockwise).
A: <1,2,3,4,5> D: 2
O: <4,5,1,2,3>

Solution

Brute Force Solution
- A somewhat obvious solution would be to shift the array down once, D times. The time complexity for such a solution would be O(dn).

RotateArray(A, D)
    while D > 0 do
          D -= 1
          temp <-- A[A.length - 1]
          start <-- A[1]
          prev <-- 0
          for i <-- 1 to A.length - 1 do
              prev <-- A[i + 1]
              A[i + 1] <-- start
              start  <-- prev
          A[0] = temp

Elegant Solution
- Let us take a moment to consider the brute force solution and its bottlenecks. Our time complexity of O(dn) comes from the fact that we are force to
  touch each element of the array D times to successfully rotate an array D times.

  If we were to try and brute force this and put A[i] to position[(i + D) % n] we lose i + k as it has been over written.

  Notice that if given a value of 2 for D, we are to shift all elements to the right by 2. Rather than calling a one shift algorithm D times, we can
  move a value up D spaces, while storing the element at A[i + D] in a temp pointer. Instead of iterating to the very next element, we iterate to
  (i + D) % n to properly shift that element into its final position.

  When (i + D) % n = 0 we have reached our original starting point and have shifted the D / n elements into their correct spaces. We then increment
  the outer loop by one to continue swapping the other elements into their respective correct positions.

RotateArray(A, D)
    n <-- A.length
    D <-- D % n
    count <-- 0

    for i <-- 1 AND count <= A.length do
        current <-- i
        prev <-- A[i]
        do
            next <-- (current + D) % n
            temp <-- A[next]
            A[next] <-- prev
            prev <-- temp
            current <-- next
            count += 1
        while i != current

Reverse Array Solution
- Looking at the expected output we notice an interesting pattern. Given the array <1,2,3,4,5> with D = 3 our output is <3,4,5,1,2>. Given an output
  like this we can take advantage of the the last N - D + 1 numbers being in the front, essentialy "reversing" the direction of the array. Using this
  observation we can reverse the array three times to acheive a rotated array in O(n) time and constant space.

  We reverse the whole array first. This gives us <5,4,3,2,1>. Then we reverse the The first N - D + 1 numbers giving us <3,4,5,2,1>.
  Finally we reverse the last D numbers giving us <5,4,3,1,2>.

RotateArray(A, D)
    Reverse(A, 1, A.length)
    Reverse(A, 1, N - D + 1)
    Reverse(A, D + 1, A.length)

Reverse(A, start, end)
    while start < end do
        temp <-- A[start]
        A[start] <-- A[end]
        A[end] <-- temp
